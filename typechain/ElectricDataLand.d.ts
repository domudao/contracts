/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ElectricDataLandInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "bondNFT()": FunctionFragment;
    "burnNFT(uint256)": FunctionFragment;
    "contains(address)": FunctionFragment;
    "contractList(uint256)": FunctionFragment;
    "depositNFT(uint256)": FunctionFragment;
    "domu()": FunctionFragment;
    "emergencyWithdrawTokens(address,uint256)": FunctionFragment;
    "getApplications(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getOwnershipInformation(uint256,bytes32)": FunctionFragment;
    "getPublishingList()": FunctionFragment;
    "getValidatorQueue(address)": FunctionFragment;
    "getValidators()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "propertyOwner(address,uint256)": FunctionFragment;
    "proposalList(uint256)": FunctionFragment;
    "proxy()": FunctionFragment;
    "returnValidators(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setFixedFee(uint256)": FunctionFragment;
    "stakeDomu(uint256)": FunctionFragment;
    "stakedBalance(address)": FunctionFragment;
    "submitProposal(string,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unstakeDomu(uint256)": FunctionFragment;
    "validatorDecision(uint256,bytes32,bool)": FunctionFragment;
    "validatorList(uint256)": FunctionFragment;
    "validatorQueue(address,uint256)": FunctionFragment;
    "validatorVotes(uint256,address)": FunctionFragment;
    "withdrawNFT(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "bondNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "contains", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contractList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "domu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplications",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnershipInformation",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishingList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "proxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnValidators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeDomu",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeDomu",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorDecision",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorQueue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorVotes",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnershipInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeDomu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeDomu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorDecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class ElectricDataLand extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ElectricDataLandInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    "baseURI()"(overrides?: CallOverrides): Promise<[string]>;

    bondNFT(overrides?: CallOverrides): Promise<[string]>;

    "bondNFT()"(overrides?: CallOverrides): Promise<[string]>;

    burnNFT(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnNFT(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contains(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    "contains(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "contractList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    depositNFT(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositNFT(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    domu(overrides?: CallOverrides): Promise<[string]>;

    "domu()"(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdrawTokens(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdrawTokens(address,uint256)"(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getApplications(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getApplications(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOwnershipInformation(
      _id: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getOwnershipInformation(uint256,bytes32)"(
      _id: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPublishingList(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          [string, string, string],
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          proposer: string;
          ipfsLink: string;
          hash: string;
          validators: [string, string, string];
          numVotes: BigNumber;
          storedFee: BigNumber;
          status: BigNumber;
        })[]
      ]
    >;

    "getPublishingList()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          [string, string, string],
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          proposer: string;
          ipfsLink: string;
          hash: string;
          validators: [string, string, string];
          numVotes: BigNumber;
          storedFee: BigNumber;
          status: BigNumber;
        })[]
      ]
    >;

    getValidatorQueue(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getValidatorQueue(address)"(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getValidators(
      overrides?: CallOverrides
    ): Promise<[[string, string, string]]>;

    "getValidators()"(
      overrides?: CallOverrides
    ): Promise<[[string, string, string]]>;

    initialize(
      _domu: string,
      _nft: string,
      _tokenProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _domu: string,
      _nft: string,
      _tokenProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    propertyOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "propertyOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposalList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        proposer: string;
        ipfsLink: string;
        hash: string;
        numVotes: BigNumber;
        storedFee: BigNumber;
        status: BigNumber;
      }
    >;

    "proposalList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        proposer: string;
        ipfsLink: string;
        hash: string;
        numVotes: BigNumber;
        storedFee: BigNumber;
        status: BigNumber;
      }
    >;

    proxy(overrides?: CallOverrides): Promise<[string]>;

    "proxy()"(overrides?: CallOverrides): Promise<[string]>;

    returnValidators(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string, string]]>;

    "returnValidators(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string, string]]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFixedFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFixedFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeDomu(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeDomu(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakedBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "stakedBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    submitProposal(
      _ipfs: string,
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitProposal(string,bytes32)"(
      _ipfs: string,
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStaked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unstakeDomu(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstakeDomu(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorDecision(
      _id: BigNumberish,
      _hash: BytesLike,
      _decision: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "validatorDecision(uint256,bytes32,bool)"(
      _id: BigNumberish,
      _hash: BytesLike,
      _decision: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "validatorList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validatorQueue(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "validatorQueue(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validatorVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { hash: string; voted: boolean }>;

    "validatorVotes(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { hash: string; voted: boolean }>;

    withdrawNFT(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawNFT(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  "baseURI()"(overrides?: CallOverrides): Promise<string>;

  bondNFT(overrides?: CallOverrides): Promise<string>;

  "bondNFT()"(overrides?: CallOverrides): Promise<string>;

  burnNFT(
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnNFT(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contains(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "contains(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contractList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "contractList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  depositNFT(
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositNFT(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  domu(overrides?: CallOverrides): Promise<string>;

  "domu()"(overrides?: CallOverrides): Promise<string>;

  emergencyWithdrawTokens(
    _token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdrawTokens(address,uint256)"(
    _token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getApplications(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getApplications(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOwnershipInformation(
    _id: BigNumberish,
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getOwnershipInformation(uint256,bytes32)"(
    _id: BigNumberish,
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPublishingList(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      [string, string, string],
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      ipfsLink: string;
      hash: string;
      validators: [string, string, string];
      numVotes: BigNumber;
      storedFee: BigNumber;
      status: BigNumber;
    })[]
  >;

  "getPublishingList()"(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      [string, string, string],
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      ipfsLink: string;
      hash: string;
      validators: [string, string, string];
      numVotes: BigNumber;
      storedFee: BigNumber;
      status: BigNumber;
    })[]
  >;

  getValidatorQueue(
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getValidatorQueue(address)"(
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getValidators(overrides?: CallOverrides): Promise<[string, string, string]>;

  "getValidators()"(
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  initialize(
    _domu: string,
    _nft: string,
    _tokenProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _domu: string,
    _nft: string,
    _tokenProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  propertyOwner(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "propertyOwner(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber] & {
      proposer: string;
      ipfsLink: string;
      hash: string;
      numVotes: BigNumber;
      storedFee: BigNumber;
      status: BigNumber;
    }
  >;

  "proposalList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber] & {
      proposer: string;
      ipfsLink: string;
      hash: string;
      numVotes: BigNumber;
      storedFee: BigNumber;
      status: BigNumber;
    }
  >;

  proxy(overrides?: CallOverrides): Promise<string>;

  "proxy()"(overrides?: CallOverrides): Promise<string>;

  returnValidators(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  "returnValidators(uint256)"(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFixedFee(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFixedFee(uint256)"(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeDomu(
    stakedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeDomu(uint256)"(
    stakedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakedBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "stakedBalance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  submitProposal(
    _ipfs: string,
    _hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitProposal(string,bytes32)"(
    _ipfs: string,
    _hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unstakeDomu(
    stakedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstakeDomu(uint256)"(
    stakedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorDecision(
    _id: BigNumberish,
    _hash: BytesLike,
    _decision: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "validatorDecision(uint256,bytes32,bool)"(
    _id: BigNumberish,
    _hash: BytesLike,
    _decision: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "validatorList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  validatorQueue(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "validatorQueue(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validatorVotes(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { hash: string; voted: boolean }>;

  "validatorVotes(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { hash: string; voted: boolean }>;

  withdrawNFT(
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawNFT(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    bondNFT(overrides?: CallOverrides): Promise<string>;

    "bondNFT()"(overrides?: CallOverrides): Promise<string>;

    burnNFT(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burnNFT(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contains(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "contains(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contractList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "contractList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    depositNFT(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "depositNFT(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    domu(overrides?: CallOverrides): Promise<string>;

    "domu()"(overrides?: CallOverrides): Promise<string>;

    emergencyWithdrawTokens(
      _token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdrawTokens(address,uint256)"(
      _token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApplications(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getApplications(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwnershipInformation(
      _id: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getOwnershipInformation(uint256,bytes32)"(
      _id: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPublishingList(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        [string, string, string],
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        ipfsLink: string;
        hash: string;
        validators: [string, string, string];
        numVotes: BigNumber;
        storedFee: BigNumber;
        status: BigNumber;
      })[]
    >;

    "getPublishingList()"(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        [string, string, string],
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        ipfsLink: string;
        hash: string;
        validators: [string, string, string];
        numVotes: BigNumber;
        storedFee: BigNumber;
        status: BigNumber;
      })[]
    >;

    getValidatorQueue(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getValidatorQueue(address)"(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getValidators(overrides?: CallOverrides): Promise<[string, string, string]>;

    "getValidators()"(
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    initialize(
      _domu: string,
      _nft: string,
      _tokenProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _domu: string,
      _nft: string,
      _tokenProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    propertyOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propertyOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        proposer: string;
        ipfsLink: string;
        hash: string;
        numVotes: BigNumber;
        storedFee: BigNumber;
        status: BigNumber;
      }
    >;

    "proposalList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        proposer: string;
        ipfsLink: string;
        hash: string;
        numVotes: BigNumber;
        storedFee: BigNumber;
        status: BigNumber;
      }
    >;

    proxy(overrides?: CallOverrides): Promise<string>;

    "proxy()"(overrides?: CallOverrides): Promise<string>;

    returnValidators(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    "returnValidators(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFixedFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setFixedFee(uint256)"(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeDomu(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeDomu(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakedBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitProposal(
      _ipfs: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitProposal(string,bytes32)"(
      _ipfs: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeDomu(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstakeDomu(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorDecision(
      _id: BigNumberish,
      _hash: BytesLike,
      _decision: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "validatorDecision(uint256,bytes32,bool)"(
      _id: BigNumberish,
      _hash: BytesLike,
      _decision: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "validatorList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    validatorQueue(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validatorQueue(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { hash: string; voted: boolean }>;

    "validatorVotes(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { hash: string; voted: boolean }>;

    withdrawNFT(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawNFT(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Initialized(version: null): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    bondNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "bondNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnNFT(_id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burnNFT(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    contains(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "contains(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositNFT(_id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "depositNFT(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    domu(overrides?: CallOverrides): Promise<BigNumber>;

    "domu()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawTokens(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdrawTokens(address,uint256)"(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getApplications(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApplications(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnershipInformation(
      _id: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwnershipInformation(uint256,bytes32)"(
      _id: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublishingList(overrides?: CallOverrides): Promise<BigNumber>;

    "getPublishingList()"(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorQueue(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValidatorQueue(address)"(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidators(overrides?: CallOverrides): Promise<BigNumber>;

    "getValidators()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _domu: string,
      _nft: string,
      _tokenProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _domu: string,
      _nft: string,
      _tokenProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propertyOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propertyOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxy(overrides?: CallOverrides): Promise<BigNumber>;

    "proxy()"(overrides?: CallOverrides): Promise<BigNumber>;

    returnValidators(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "returnValidators(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFixedFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFixedFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeDomu(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeDomu(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakedBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakedBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitProposal(
      _ipfs: string,
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitProposal(string,bytes32)"(
      _ipfs: string,
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unstakeDomu(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstakeDomu(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorDecision(
      _id: BigNumberish,
      _hash: BytesLike,
      _decision: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "validatorDecision(uint256,bytes32,bool)"(
      _id: BigNumberish,
      _hash: BytesLike,
      _decision: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validatorList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorQueue(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validatorQueue(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validatorVotes(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawNFT(_id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdrawNFT(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bondNFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnNFT(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnNFT(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contains(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contains(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositNFT(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositNFT(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    domu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdrawTokens(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdrawTokens(address,uint256)"(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getApplications(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApplications(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnershipInformation(
      _id: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwnershipInformation(uint256,bytes32)"(
      _id: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublishingList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPublishingList()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorQueue(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValidatorQueue(address)"(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getValidators()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _domu: string,
      _nft: string,
      _tokenProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _domu: string,
      _nft: string,
      _tokenProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propertyOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "propertyOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnValidators(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "returnValidators(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFixedFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFixedFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeDomu(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeDomu(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakedBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitProposal(
      _ipfs: string,
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitProposal(string,bytes32)"(
      _ipfs: string,
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unstakeDomu(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstakeDomu(uint256)"(
      stakedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorDecision(
      _id: BigNumberish,
      _hash: BytesLike,
      _decision: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "validatorDecision(uint256,bytes32,bool)"(
      _id: BigNumberish,
      _hash: BytesLike,
      _decision: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validatorList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorQueue(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validatorQueue(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validatorVotes(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawNFT(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawNFT(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
